<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Drag & Drop File Upload</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-900 text-white font-sans">

  <div class="flex justify-center items-center min-h-screen">
    <div class="bg-gray-800 p-8 rounded-lg shadow-xl w-full max-w-lg">
      <h2 class="text-3xl font-semibold mb-6 text-center">Upload Files</h2>
      
      <!-- Drag & Drop Section -->
      <div class="flex flex-col items-center mb-6 border-2 border-dashed border-gray-600 rounded-lg p-8 transition duration-200 ease-in-out hover:border-gray-400 cursor-pointer">
        <p class="text-lg text-gray-300 mb-4">Drag & Drop your files here</p>
        <div id="drop-zone" class="flex flex-col items-center justify-center space-y-4 w-full">
          <svg xmlns="http://www.w3.org/2000/svg" class="w-16 h-16 text-gray-500 mb-2" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
            <path stroke-linecap="round" stroke-linejoin="round" d="M12 4v16m8-8H4"></path>
          </svg>
          <p class="text-gray-500">or</p>
        </div>
        <p class="text-sm text-gray-400 mt-2">Accepts: .png, .docx, .exe, .pif, .scf</p>
      </div>

      <!-- Upload Button -->
      <div class="flex justify-center mb-6">
        <label for="file-upload" class="text-white bg-blue-600 hover:bg-blue-500 px-4 py-2 rounded-md cursor-pointer">
          Choose Files
        </label>
        <input type="file" id="file-upload" class="hidden" multiple>
      </div>
      
      <div id="file-list" class="space-y-2">
        <!-- Uploaded files will be listed here -->
      </div>
    </div>
  </div>

  <script>
    // Drag & Drop functionality
    const dropZone = document.getElementById('drop-zone');
    const fileInput = document.getElementById('file-upload');
    const fileList = document.getElementById('file-list');
    const acceptedFileTypes = ['.png', '.docx', '.exe', '.pif', '.scf'];

    // Prevent default drag behaviors
    dropZone.addEventListener('dragover', (e) => {
      e.preventDefault();
      dropZone.classList.add('border-gray-400');
    });

    dropZone.addEventListener('dragleave', () => {
      dropZone.classList.remove('border-gray-400');
    });

    dropZone.addEventListener('drop', (e) => {
      e.preventDefault();
      dropZone.classList.remove('border-gray-400');
      const files = e.dataTransfer.files;
      handleFileUpload(files);
    });

    fileInput.addEventListener('change', (e) => {
      const files = e.target.files;
      handleFileUpload(files);
    });

    function handleFileUpload(files) {
      Array.from(files).forEach((file) => {
        const fileExtension = file.name.slice(((file.name.lastIndexOf(".") - 1) >>> 0) + 2);
        if (acceptedFileTypes.includes(`.${fileExtension.toLowerCase()}`)) {
          const fileItem = document.createElement('div');
          fileItem.classList.add('flex', 'items-center', 'space-x-2', 'bg-gray-700', 'p-2', 'rounded-lg', 'shadow-sm');

          const fileName = document.createElement('span');
          fileName.classList.add('text-sm', 'text-gray-300');
          fileName.textContent = file.name;

          const fileSize = document.createElement('span');
          fileSize.classList.add('text-xs', 'text-gray-500');
          fileSize.textContent = `${(file.size / 1024).toFixed(2)} KB`;

          fileItem.appendChild(fileName);
          fileItem.appendChild(fileSize);
          fileList.appendChild(fileItem);
        } else {
          alert(`File type .${fileExtension} is not allowed.`);
        }
      });
    }
  </script>

</body>
</html>
